generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    username      String?         @unique
    avatar        Int?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    caughtPokemon CaughtPokemon[]
    trainerBadges TrainerBadges[]
    team          Team[]
    posts         Post[]
    likedPosts    Likes[]
}

model Post {
    id       String   @id @default(cuid())
    content  String   @db.VarChar(255)
    author   User     @relation(fields: [authorId], references: [id])
    authorId String
    date     DateTime @default(now())
    likedBy  Likes[]
}

model Likes {
    id     String @id @default(cuid())
    User   User   @relation(fields: [userId], references: [id])
    userId String
    Post   Post   @relation(fields: [postId], references: [id])
    postId String

    @@unique([userId, postId])
}

model CaughtPokemon {
    id        String @id @default(cuid())
    pokemonId Int
    user      User   @relation(fields: [userId], references: [id])
    userId    String

    @@unique([userId, pokemonId])
}

model TrainerBadges {
    id      String @id @default(cuid())
    badgeId Int
    user    User   @relation(fields: [userId], references: [id])
    userId  String

    @@unique([userId, badgeId])
}

model Team {
    id        String @id @default(cuid())
    pokemonId Int
    name      String
    type      String
    user      User   @relation(fields: [userId], references: [id])
    userId    String

    @@unique([userId, pokemonId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
